{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d0a34f4e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "عدد الصفوف النهائية: 1405\n",
      "                                             Book Title  Price  Availability  \\\n",
      "0                               It's Only the Himalayas  45.17             1   \n",
      "1     Full Moon over Noah’s Ark: An Odyssey to Mount...  49.43             1   \n",
      "2     See America: A Celebration of Our National Par...  48.87             1   \n",
      "3     Vagabonding: An Uncommon Guide to the Art of L...  36.94             1   \n",
      "4                                  Under the Tuscan Sun  37.33             1   \n",
      "...                                                 ...    ...           ...   \n",
      "1400                              The Great Gatsby #396   8.97             1   \n",
      "1401                                       Dracula #397   9.70             0   \n",
      "1402                                 Anna Karenina #398   9.37             0   \n",
      "1403                                     Jane Eyre #399  10.09             0   \n",
      "1404                                          1984 #400  14.61             0   \n",
      "\n",
      "      Rating                                          Image URL  \\\n",
      "0          2  https://books.toscrape.com/media/cache/27/a5/2...   \n",
      "1          4  https://books.toscrape.com/media/cache/57/77/5...   \n",
      "2          3  https://books.toscrape.com/media/cache/9a/7e/9...   \n",
      "3          2  https://books.toscrape.com/media/cache/d5/bf/d...   \n",
      "4          3  https://books.toscrape.com/media/cache/98/c2/9...   \n",
      "...      ...                                                ...   \n",
      "1400       1                                                NaN   \n",
      "1401       2                                                NaN   \n",
      "1402       2                                                NaN   \n",
      "1403       5                                                NaN   \n",
      "1404       3                                                NaN   \n",
      "\n",
      "                                              Book Link Category  \n",
      "0     https://books.toscrape.com/catalogue/its-only-...   Travel  \n",
      "1     https://books.toscrape.com/catalogue/full-moon...   Travel  \n",
      "2     https://books.toscrape.com/catalogue/see-ameri...   Travel  \n",
      "3     https://books.toscrape.com/catalogue/vagabondi...   Travel  \n",
      "4     https://books.toscrape.com/catalogue/under-the...   Travel  \n",
      "...                                                 ...      ...  \n",
      "1400                                                NaN      NaN  \n",
      "1401                                                NaN      NaN  \n",
      "1402                                                NaN      NaN  \n",
      "1403                                                NaN      NaN  \n",
      "1404                                                NaN      NaN  \n",
      "\n",
      "[1405 rows x 7 columns]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\C2D\\AppData\\Local\\Temp\\ipykernel_24964\\4255305744.py:22: FutureWarning: Downcasting behavior in `replace` is deprecated and will be removed in a future version. To retain the old behavior, explicitly call `result.infer_objects(copy=False)`. To opt-in to the future behavior, set `pd.set_option('future.no_silent_downcasting', True)`\n",
      "  df_all[\"Rating\"] = df_all[\"Rating\"].replace(rating_map)\n",
      "C:\\Users\\C2D\\AppData\\Local\\Temp\\ipykernel_24964\\4255305744.py:28: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n",
      "The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n",
      "\n",
      "For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n",
      "\n",
      "\n",
      "  df_all[\"Rating\"].fillna(df_all[\"Rating\"].median(), inplace=True)\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "df_scrap = pd.read_csv(r\"C:\\Tasks of Technical\\all_books.csv\")\n",
    "\n",
    "df_csv = pd.read_csv(r\"C:\\Tasks of Technical\\sample_books (1).csv\")\n",
    "\n",
    "df_json = pd.read_json(r\"C:\\Tasks of Technical\\sample_books_400 (1).json\")\n",
    "\n",
    "df_scrap.rename(columns={\"Title\": \"Book Title\"}, inplace=True)\n",
    "\n",
    "df_all = pd.concat([df_scrap, df_csv, df_json], ignore_index=True)\n",
    "\n",
    "df_all[\"Price\"] = df_all[\"Price\"].astype(str).str.replace(\"£\", \"\").astype(float)\n",
    "\n",
    "df_all[\"Availability\"] = df_all[\"Availability\"].apply(lambda x: 1 if \"In stock\" in str(x) else 0)\n",
    "\n",
    "rating_map = {\"One\": 1, \"Two\": 2, \"Three\": 3, \"Four\": 4, \"Five\": 5}\n",
    "df_all[\"Rating\"] = df_all[\"Rating\"].replace(rating_map)\n",
    "\n",
    "df_all.replace([\"\", \" \", \"NA\", \"N/A\", None], np.nan, inplace=True)\n",
    "\n",
    "df_all[\"Rating\"].fillna(df_all[\"Rating\"].median(), inplace=True)\n",
    "\n",
    "df_all.to_csv(r\"C:\\Tasks of Technical\\merged_books.csv\", index=False)\n",
    "df_all.to_json(r\"C:\\Tasks of Technical\\merged_books.json\", orient=\"records\", lines=True)\n",
    "\n",
    "print(\"عدد الصفوف النهائية:\", len(df_all))\n",
    "print(df_all)  \n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "99ae456d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Defaulting to user installation because normal site-packages is not writeable\n",
      "Collecting openpyxl\n",
      "  Downloading openpyxl-3.1.5-py2.py3-none-any.whl.metadata (2.5 kB)\n",
      "Collecting et-xmlfile (from openpyxl)\n",
      "  Downloading et_xmlfile-2.0.0-py3-none-any.whl.metadata (2.7 kB)\n",
      "Downloading openpyxl-3.1.5-py2.py3-none-any.whl (250 kB)\n",
      "Downloading et_xmlfile-2.0.0-py3-none-any.whl (18 kB)\n",
      "Installing collected packages: et-xmlfile, openpyxl\n",
      "Successfully installed et-xmlfile-2.0.0 openpyxl-3.1.5\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "[notice] A new release of pip is available: 25.0.1 -> 25.2\n",
      "[notice] To update, run: python.exe -m pip install --upgrade pip\n"
     ]
    }
   ],
   "source": [
    "!pip install openpyxl\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "70d8b1e0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Defaulting to user installation because normal site-packages is not writeable\n",
      "Requirement already satisfied: openpyxl in c:\\users\\c2d\\appdata\\roaming\\python\\python313\\site-packages (3.1.5)\n",
      "Requirement already satisfied: et-xmlfile in c:\\users\\c2d\\appdata\\roaming\\python\\python313\\site-packages (from openpyxl) (2.0.0)\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "[notice] A new release of pip is available: 25.0.1 -> 25.2\n",
      "[notice] To update, run: python.exe -m pip install --upgrade pip\n"
     ]
    }
   ],
   "source": [
    "pip install openpyxl\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6ecd80bd",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "f2e0a1b6",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\C2D\\AppData\\Local\\Temp\\ipykernel_24964\\912767430.py:19: FutureWarning: Downcasting behavior in `replace` is deprecated and will be removed in a future version. To retain the old behavior, explicitly call `result.infer_objects(copy=False)`. To opt-in to the future behavior, set `pd.set_option('future.no_silent_downcasting', True)`\n",
      "  df_all[\"Rating\"] = df_all[\"Rating\"].replace(rating_map)\n",
      "C:\\Users\\C2D\\AppData\\Local\\Temp\\ipykernel_24964\\912767430.py:23: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n",
      "The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n",
      "\n",
      "For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n",
      "\n",
      "\n",
      "  df_all[\"Rating\"].fillna(df_all[\"Rating\"].median(), inplace=True)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "تم إنشاء ملف Excel باسم merged_books.xlsx في C:\\Tasks of Technical\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "df_scrap = pd.read_csv(r\"C:\\Tasks of Technical\\all_books.csv\")\n",
    "\n",
    "df_csv = pd.read_csv(r\"C:\\Tasks of Technical\\sample_books (1).csv\")\n",
    "\n",
    "df_json = pd.read_json(r\"C:\\Tasks of Technical\\sample_books_400 (1).json\")\n",
    "\n",
    "df_scrap.rename(columns={\"Title\": \"Book Title\"}, inplace=True)\n",
    "\n",
    "df_all = pd.concat([df_scrap, df_csv, df_json], ignore_index=True)\n",
    "\n",
    "df_all[\"Price\"] = df_all[\"Price\"].astype(str).str.replace(\"£\", \"\").astype(float)\n",
    "\n",
    "df_all[\"Availability\"] = df_all[\"Availability\"].apply(lambda x: 1 if \"In stock\" in str(x) else 0)\n",
    "\n",
    "rating_map = {\"One\": 1, \"Two\": 2, \"Three\": 3, \"Four\": 4, \"Five\": 5}\n",
    "df_all[\"Rating\"] = df_all[\"Rating\"].replace(rating_map)\n",
    "\n",
    "df_all.replace([\"\", \" \", \"NA\", \"N/A\", None], np.nan, inplace=True)\n",
    "\n",
    "df_all[\"Rating\"].fillna(df_all[\"Rating\"].median(), inplace=True)\n",
    "\n",
    "df_all.to_excel(r\"C:\\Tasks of Technical\\merged_books.xlsx\", index=False)\n",
    "\n",
    "print(\"تم إنشاء ملف Excel باسم merged_books.xlsx في C:\\\\Tasks of Technical\")\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
